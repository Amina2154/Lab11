-- Create the PhoneBook Table
CREATE TABLE IF NOT EXISTS PhoneBook (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50),
    phone_number VARCHAR(15) UNIQUE NOT NULL
);

-- 1. Function to Return All Records Based on a Pattern (Name, Surname, Phone Number)
CREATE OR REPLACE FUNCTION search_phonebook(pattern VARCHAR)
RETURNS TABLE(id INT, first_name VARCHAR, last_name VARCHAR, phone_number VARCHAR) AS
$$
BEGIN
    RETURN QUERY
    SELECT id, first_name, last_name, phone_number
    FROM PhoneBook
    WHERE first_name ILIKE '%' || pattern || '%'
       OR last_name ILIKE '%' || pattern || '%'
       OR phone_number LIKE '%' || pattern || '%';
END;
$$ LANGUAGE plpgsql;

-- 2. Procedure to Insert New User by Name and Phone, or Update Phone if User Already Exists
CREATE OR REPLACE PROCEDURE insert_or_update_user(
    p_first_name VARCHAR,
    p_last_name VARCHAR,
    p_phone_number VARCHAR
)
LANGUAGE plpgsql
AS
$$
BEGIN
    -- Check if the user already exists by phone number
    IF EXISTS (SELECT 1 FROM PhoneBook WHERE phone_number = p_phone_number) THEN
        -- If user exists, update their details
        UPDATE PhoneBook
        SET first_name = p_first_name, last_name = p_last_name
        WHERE phone_number = p_phone_number;
    ELSE
        -- If user does not exist, insert a new record
        INSERT INTO PhoneBook (first_name, last_name, phone_number)
        VALUES (p_first_name, p_last_name, p_phone_number);
    END IF;
END;
$$;

-- 3. Procedure to Insert Many New Users Using a List and Check for Phone Validity
CREATE OR REPLACE PROCEDURE insert_multiple_users(
    user_list TEXT[] -- Array of name and phone pairs, e.g., '{"John, Doe, 1234567890", "Jane, Smith, 9876543210"}'
)
LANGUAGE plpgsql
AS
$$
DECLARE
    user_info TEXT;
    first_name VARCHAR;
    last_name VARCHAR;
    phone_number VARCHAR;
    invalid_entries TEXT[] := '{}';  -- Array to store invalid entries
BEGIN
    -- Loop through the list of user entries
    FOREACH user_info IN ARRAY user_list
    LOOP
        -- Split the user_info into first name, last name, and phone number
        first_name := split_part(user_info, ',', 1);
        last_name := split_part(user_info, ',', 2);
        phone_number := split_part(user_info, ',', 3);
        
        -- Check if the phone number is valid (e.g., check length and numeric)
        IF LENGTH(phone_number) = 10 AND phone_number ~ '^[0-9]+$' THEN
            -- Insert the valid user
            INSERT INTO PhoneBook (first_name, last_name, phone_number)
            VALUES (first_name, last_name, phone_number);
        ELSE
            -- Store invalid entry in the array
            invalid_entries := array_append(invalid_entries, user_info);
        END IF;
    END LOOP;

    -- Return the invalid entries (if any)
    IF array_length(invalid_entries, 1) > 0 THEN
        RAISE NOTICE 'Invalid entries: %', invalid_entries;
    END IF;
END;
$$;

-- 4. Function to Query Data with Pagination (Limit and Offset)
CREATE OR REPLACE FUNCTION query_phonebook_paginated(
    p_limit INT,
    p_offset INT
)
RETURNS TABLE(id INT, first_name VARCHAR, last_name VARCHAR, phone_number VARCHAR) AS
$$
BEGIN
    RETURN QUERY
    SELECT id, first_name, last_name, phone_number
    FROM PhoneBook
    ORDER BY id
    LIMIT p_limit OFFSET p_offset;
END;
$$ LANGUAGE plpgsql;

-- 5. Procedure to Delete Data by Username or Phone
CREATE OR REPLACE PROCEDURE delete_by_username_or_phone(
    p_first_name VARCHAR,
    p_phone_number VARCHAR
)
LANGUAGE plpgsql
AS
$$
BEGIN
    -- Delete by first name
    IF p_first_name IS NOT NULL THEN
        DELETE FROM PhoneBook WHERE first_name = p_first_name;
    END IF;

    -- Delete by phone number
    IF p_phone_number IS NOT NULL THEN
        DELETE FROM PhoneBook WHERE phone_number = p_phone_number;
    END IF;
END;
$$;

-- Example usage of the stored procedures and functions:

-- 1. Insert or Update User (if exists, update; otherwise, insert)
-- Call example:
-- CALL insert_or_update_user('John', 'Doe', '1234567890');

-- 2. Insert Multiple Users
-- Call example:
-- CALL insert_multiple_users(ARRAY['John, Doe, 1234567890', 'Jane, Smith, 9876543210']);

-- 3. Query Phonebook with Pagination
-- Call example:
-- SELECT * FROM query_phonebook_paginated(10, 0); -- Limit 10, Offset 0

-- 4. Search Phonebook by Pattern (Name, Surname, Phone)
-- Call example:
-- SELECT * FROM search_phonebook('John'); -- Find records matching 'John'

-- 5. Delete by Username or Phone
-- Call example:
-- CALL delete_by_username_or_phone('John', NULL); -- Delete user with first name 'John'
-- CALL delete_by_username_or_phone(NULL, '1234567890'); -- Delete user with phone number '1234567890'
